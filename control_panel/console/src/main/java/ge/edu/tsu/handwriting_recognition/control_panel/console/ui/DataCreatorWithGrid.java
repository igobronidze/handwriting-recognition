package ge.edu.tsu.handwriting_recognition.control_panel.console.ui;import ge.edu.tsu.handwriting_recognition.control_panel.console.resources.Messages;import ge.edu.tsu.handwriting_recognition.control_panel.console.utils.ShowAlert;import ge.edu.tsu.handwriting_recognition.control_panel.console.utils.StageUtils;import ge.edu.tsu.handwriting_recognition.control_panel.model.data.NormalizedData;import ge.edu.tsu.handwriting_recognition.control_panel.model.info.CharSequence;import ge.edu.tsu.handwriting_recognition.control_panel.model.sysparam.Parameter;import ge.edu.tsu.handwriting_recognition.control_panel.service.neuralnetwork.NeuralNetworkManagerType;import ge.edu.tsu.handwriting_recognition.control_panel.service.neuralnetwork.NeuralNetworkService;import ge.edu.tsu.handwriting_recognition.control_panel.service.neuralnetwork.NeuralNetworkServiceImpl;import ge.edu.tsu.handwriting_recognition.control_panel.service.normalizeddata.NormalizedDataService;import ge.edu.tsu.handwriting_recognition.control_panel.service.normalizeddata.NormalizedDataServiceImpl;import ge.edu.tsu.handwriting_recognition.control_panel.service.systemparameter.SystemParameterService;import ge.edu.tsu.handwriting_recognition.control_panel.service.systemparameter.SystemParameterServiceImpl;import javafx.collections.FXCollections;import javafx.event.ActionEvent;import javafx.event.EventHandler;import javafx.geometry.Insets;import javafx.geometry.Pos;import javafx.scene.Scene;import javafx.scene.control.Button;import javafx.scene.control.ComboBox;import javafx.scene.control.Label;import javafx.scene.control.TextField;import javafx.scene.layout.BorderPane;import javafx.scene.layout.GridPane;import javafx.scene.layout.HBox;import javafx.stage.Stage;import java.io.File;import java.util.ArrayList;import java.util.List;public class DataCreatorWithGrid extends Stage {    private SystemParameterService systemParameterService = new SystemParameterServiceImpl();    private NormalizedDataService normalizedDataService = new NormalizedDataServiceImpl();    private Parameter testDataCreatorGridDefaultWidthParameter = new Parameter("testDataCreatorGridDefaultWidth", "11");    private Parameter testDataCreatorGridDefaultHeightParameter = new Parameter("testDataCreatorGridDefaultHeight", "11");    private Parameter testDataCreatorGridMaxWidthParameter = new Parameter("testDataCreatorGridMaxWidth", "100");    private Parameter testDataCreatorGridMaxHeightParameter = new Parameter("testDataCreatorGridMaxHeight", "100");    private Parameter firstSymbolInCharSequenceParameter = new Parameter("firstSymbolInCharSequence", "ა");    private Parameter lastSymbolInCharSequenceParameter = new Parameter("lastSymbolInCharSequence", "ჰ");    private Parameter neuralNetworkDirectoryParameter = new Parameter("neuralNetworkDirectory", "D:\\sg\\handwriting_recognition\\network");    private BorderPane root;    private TextField widthField;    private TextField heightField;    private TextField generationTextField;    private TextField answerField;    private ComboBox networkComboBox;    private Button guessButton;    private boolean[][] coloredMatrix = new boolean[systemParameterService.getIntegerParameterValue(testDataCreatorGridMaxWidthParameter)]            [systemParameterService.getIntegerParameterValue(testDataCreatorGridMaxHeightParameter)];    public DataCreatorWithGrid() {        this.setTitle(Messages.get("dataCreatorWithGrid"));        root = new BorderPane();        initTopPane();        initBottomPane();        reloadCenterPane(systemParameterService.getIntegerParameterValue(testDataCreatorGridDefaultWidthParameter),                systemParameterService.getIntegerParameterValue(testDataCreatorGridDefaultHeightParameter));        this.setScene(new Scene(root));        StageUtils.setMaxSize(this);    }    private void reloadCenterPane(int width, int height) {        GridPane centerPane = new GridPane();        centerPane.setAlignment(Pos.CENTER);        int btnWidth = 900 / width;        int btnHeight = 560 / height;        int min = Math.min(btnWidth, btnHeight);        for (int i = 0; i < height; i++) {            for (int j = 0; j < width; j++) {                Button btn = new Button();                btn.setPrefHeight(min);                btn.setPrefWidth(min);                final int ii = i;                final int jj = j;                btn.setOnAction(new EventHandler<ActionEvent>() {                    @Override                    public void handle(ActionEvent event) {                        String color = coloredMatrix[ii][jj] ? "#e6ffff" : "#001a1a";                        btn.setStyle( "-fx-color: " + color + ";");                        coloredMatrix[ii][jj] = !coloredMatrix[ii][jj];                    }                });                btn.setStyle( "-fx-color: #e6ffff;");                coloredMatrix[i][j] = false;                centerPane.add(btn, j, i);            }        }        root.setCenter(centerPane);    }    private void initBottomPane() {        HBox bottomPane = new HBox();        bottomPane.setAlignment(Pos.CENTER);        bottomPane.setPadding(new Insets(0, 0, 10, 0));        bottomPane.setSpacing(10);        Label answerLabel = new Label(Messages.get("answer") + ":");        answerLabel.setStyle("-fx-font-family: sylfaen");        answerField = new TextField();        answerField.setStyle("-fx-font-family: sylfaen");        Label generationLabel = new Label(Messages.get("generation") + ":");        generationLabel.setStyle("-fx-font-family: sylfaen");        generationTextField = new TextField();        generationTextField.setStyle("-fx-font-family: sylfaen");        generationTextField.setPrefWidth(130);        Button saveButton = new Button(Messages.get("save"));        saveButton.setStyle("-fx-font-family: sylfaen");        saveButton.setOnAction(new EventHandler<ActionEvent>() {            @Override            public void handle(ActionEvent event) {                if (answerField.getText() == null || answerField.getText().length() != 1) {                    ShowAlert.showWarning(Messages.get("irrelevantAnswer"));                    return;                }                if (generationTextField.getText() == null || generationTextField.getText().isEmpty()) {                    ShowAlert.showWarning(Messages.get("pleaseFillAllField"));                    return;                }                char firstSymbolInCharSequence = systemParameterService.getParameterValue(firstSymbolInCharSequenceParameter).charAt(0);                char lastSymbolInCharSequence = systemParameterService.getParameterValue(lastSymbolInCharSequenceParameter).charAt(0);                CharSequence charSequence = new CharSequence(firstSymbolInCharSequence, lastSymbolInCharSequence);                NormalizedData normalizedData = new NormalizedData(getWidthFromField(), getHeightFromField(), getDataFromGrid(), answerField.getText().charAt(0), charSequence, generationTextField.getText());                normalizedDataService.addNormalizedData(normalizedData);                answerField.setText("");                reloadCenterPane(getWidthFromField(), getHeightFromField());            }        });        guessButton = new Button(Messages.get("guess"));        guessButton.setStyle("-fx-font-family: sylfaen");        networkComboBox = new ComboBox();        networkComboBox.setPrefWidth(170);        networkComboBox.setStyle("-fx-font-family: sylfaen");        reloadNetworkComboBox();        guessButton.setOnAction(new EventHandler<ActionEvent>() {            @Override            public void handle(ActionEvent event) {                NeuralNetworkService neuralNetworkService = new NeuralNetworkServiceImpl(NeuralNetworkManagerType.MY_NEURAL_NETWORK);                char ans = neuralNetworkService.guessCharacter(new NormalizedData(getWidthFromField(), getHeightFromField(), getDataFromGrid()),                        systemParameterService.getParameterValue(neuralNetworkDirectoryParameter) + "\\" + networkComboBox.getValue());                ShowAlert.showSimpleAlert("" + ans);            }        });        bottomPane.getChildren().addAll(answerLabel, answerField);        bottomPane.getChildren().addAll(generationLabel, generationTextField, saveButton, networkComboBox, guessButton);        root.setBottom(bottomPane);    }    private void initTopPane() {        HBox topPane = new HBox();        topPane.setAlignment(Pos.CENTER);        topPane.setSpacing(10);        topPane.setPadding(new Insets(10, 0, 0, 0));        Label heightLabel = new Label(Messages.get("height") + ":");        heightLabel.setStyle("-fx-font-family: sylfaen");        heightField = new TextField();        heightField.setText(systemParameterService.getParameterValue(testDataCreatorGridDefaultHeightParameter));        topPane.getChildren().addAll(heightLabel, heightField);        Label widthLabel = new Label(Messages.get("width") + ":");        widthLabel.setStyle("-fx-font-family: sylfaen");        widthField = new TextField();        widthField.setText(systemParameterService.getParameterValue(testDataCreatorGridDefaultWidthParameter));        widthField.setOnAction(new EventHandler<ActionEvent>() {            @Override            public void handle(ActionEvent event) {                reloadCenterPane(getWidthFromField(), getHeightFromField());            }        });        topPane.getChildren().addAll(widthLabel, widthField);        Button chooseButton = new Button(Messages.get("create"));        chooseButton.setStyle("-fx-font-family: sylfaen");        chooseButton.setOnAction(new EventHandler<ActionEvent>() {            @Override            public void handle(ActionEvent event) {                reloadCenterPane(getWidthFromField(), getHeightFromField());            }        });        topPane.getChildren().add(chooseButton);        root.setTop(topPane);    }    private int getWidthFromField() {        try {            int width = Integer.parseInt(widthField.getText());            if (width <=0 || width > systemParameterService.getIntegerParameterValue(testDataCreatorGridMaxWidthParameter)) {                widthField.setText(systemParameterService.getParameterValue(testDataCreatorGridDefaultWidthParameter));                return systemParameterService.getIntegerParameterValue(testDataCreatorGridDefaultWidthParameter);            }            return width;        } catch (NumberFormatException ex) {            widthField.setText(systemParameterService.getParameterValue(testDataCreatorGridDefaultWidthParameter));            return systemParameterService.getIntegerParameterValue(testDataCreatorGridDefaultWidthParameter);        }    }    private int getHeightFromField() {        try {            int height = Integer.parseInt(heightField.getText());            if (height <=0 || height > systemParameterService.getIntegerParameterValue(testDataCreatorGridMaxHeightParameter)) {                heightField.setText(systemParameterService.getParameterValue(testDataCreatorGridDefaultHeightParameter));                return systemParameterService.getIntegerParameterValue(testDataCreatorGridDefaultHeightParameter);            }            return height;        } catch (NumberFormatException ex) {            heightField.setText(systemParameterService.getParameterValue(testDataCreatorGridDefaultHeightParameter));            return systemParameterService.getIntegerParameterValue(testDataCreatorGridDefaultHeightParameter);        }    }    private Float[] getDataFromGrid() {        int width = getWidthFromField();        int height = getHeightFromField();        Float[] data = new Float[width * height];        for (int i = 0; i < height; i++) {            for (int j = 0; j < width; j++) {                data[i * width + j] = (coloredMatrix[i][j] ? 1.0f : 0.0f);            }        }        return data;    }    private List<String> getNetworkNames() {        List<String> networks = new ArrayList<>();        File folder = new File(systemParameterService.getParameterValue(neuralNetworkDirectoryParameter));        for (File file : folder.listFiles()) {            networks.add(file.getName());        }        return networks;    }    private void reloadNetworkComboBox() {        networkComboBox.setItems(FXCollections.observableArrayList(getNetworkNames()));        if (networkComboBox.getItems().size() != 0) {            networkComboBox.setValue(networkComboBox.getItems().get(0));            guessButton.setDisable(false);        } else {            guessButton.setDisable(true);        }    }}