package ge.tsu.handwritin_recognition.datacreator.fx;import ge.tsu.handwritin_recognition.model.InputData;import ge.tsu.handwritin_recognition.utils.fxutils.ShowAlert;import ge.tsu.handwritin_recognition.systemsetting.SystemParameter;import javafx.application.Application;import javafx.event.ActionEvent;import javafx.event.EventHandler;import javafx.geometry.Insets;import javafx.geometry.Pos;import javafx.scene.Scene;import javafx.scene.control.Button;import javafx.scene.control.ComboBox;import javafx.scene.control.Label;import javafx.scene.control.TextField;import javafx.scene.layout.BorderPane;import javafx.scene.layout.GridPane;import javafx.scene.layout.HBox;import javafx.stage.Stage;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.ObjectOutputStream;import java.nio.file.Files;import java.nio.file.Paths;import java.util.ArrayList;import java.util.List;import java.util.Random;public class DataCreatorFX extends Application {    private BorderPane root;    private TextField widthField;    private TextField heightField;    private ComboBox<String> dataSetsCombo;    private TextField answerField;    private boolean[][] coloredMatrix = new boolean[SystemParameter.testDataCreatorGridMaxWidth][SystemParameter.testDataCreatorGridMaxHeight];    public static void main(String[] args) {        launch(args);    }    @Override    public void start(Stage primaryStage) {        primaryStage.setTitle("Create test data");        root = new BorderPane();        initTopPane();        initBottomPane();        reloadCenterPane(SystemParameter.testDataCreatorGridDefaultWidth, SystemParameter.testDataCreatorGridDefaultHeight);        primaryStage.setScene(new Scene(root, SystemParameter.testDataCreatorWindowWidth, SystemParameter.testDataCreatorWindowHeight));        primaryStage.show();    }    private void reloadCenterPane(int width, int height) {        GridPane centerPane = new GridPane();        centerPane.setAlignment(Pos.CENTER);        int btnWidth = SystemParameter.testDataCreatorWindowWidth / width;        int btnHeight = (SystemParameter.testDataCreatorWindowHeight - 90) / height;        int min = Math.min(btnWidth, btnHeight);        for (int i = 0; i < height; i++) {            for (int j = 0; j < width; j++) {                Button btn = new Button();                btn.setPrefHeight(min);                btn.setPrefWidth(min);                final int ii = i;                final int jj = j;                btn.setOnAction(new EventHandler<ActionEvent>() {                    @Override                    public void handle(ActionEvent event) {                        String color = coloredMatrix[ii][jj] ? SystemParameter.testDataCreatorBrightColor : SystemParameter.testDataCreatorDarkColor;                        btn.setStyle( "-fx-color: " + color + ";");                        coloredMatrix[ii][jj] = !coloredMatrix[ii][jj];                    }                });                btn.setStyle( "-fx-color: " + SystemParameter.testDataCreatorBrightColor + ";");                coloredMatrix[i][j] = false;                centerPane.add(btn, j, i);            }        }        root.setCenter(centerPane);    }    private void initBottomPane() {        HBox bottomPane = new HBox();        bottomPane.setAlignment(Pos.CENTER);        bottomPane.setPadding(new Insets(0, 0, 10, 0));        bottomPane.setSpacing(10);        Label answerLabel = new Label("answer:");        answerField = new TextField();        answerField.setOnAction(new EventHandler<ActionEvent>() {            @Override            public void handle(ActionEvent event) {                saveAction();            }        });        Label dataSetLabel = new Label("directory:");        dataSetsCombo = new ComboBox<>();        dataSetsCombo.setPrefWidth(130);        dataSetsCombo.getItems().addAll(getAllDirectory());        if (dataSetsCombo.getItems().size() != 0) {            dataSetsCombo.setValue(dataSetsCombo.getItems().get(0));        }        Button saveButton = new Button("save");        saveButton.setOnAction(new EventHandler<ActionEvent>() {            @Override            public void handle(ActionEvent event) {                saveAction();            }        });        bottomPane.getChildren().addAll(answerLabel, answerField);        bottomPane.getChildren().addAll(dataSetLabel, dataSetsCombo, saveButton);        root.setBottom(bottomPane);    }    private List<String> getAllDirectory() {        List<String> directories = new ArrayList<>();        File file = new File(SystemParameter.testDataPath);        for (File f : file.listFiles()) {            if (f.isDirectory()) {                directories.add(f.getName());            }        }        return directories;    }    private void saveAction() {        if (answerField.getText() == null || answerField.getText().length() != 1) {            ShowAlert.showWarning("Irrelevant answer!");            return;        }        if (dataSetsCombo.getValue() == null) {            ShowAlert.showWarning("Please choose directory!");            return;        }        try {            String path = SystemParameter.testDataPath + "\\" + dataSetsCombo.getValue();            Random r = new Random();            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(path + "\\" + r.nextLong() + ".txt"));            InputData data = new InputData(getHeightFromField(), getWidthFromField(), coloredMatrix, answerField.getText().charAt(0));            out.writeObject(data);            out.close();            answerField.setText("");            reloadCenterPane(getWidthFromField(), getHeightFromField());        } catch (IOException ex) {            ShowAlert.showWarning("Can't save data!", ex);        }    }    private void initTopPane() {        HBox topPane = new HBox();        topPane.setAlignment(Pos.CENTER);        topPane.setSpacing(10);        topPane.setPadding(new Insets(10, 0, 0, 0));        Label widthLabel = new Label("width:");        widthField = new TextField();        widthField.setText(Integer.toString(SystemParameter.testDataCreatorGridDefaultWidth));        widthField.setOnAction(new EventHandler<ActionEvent>() {            @Override            public void handle(ActionEvent event) {                reloadCenterPane(getWidthFromField(), getHeightFromField());            }        });        topPane.getChildren().addAll(widthLabel, widthField);        Label heightLabel = new Label("height:");        heightField = new TextField();        heightField.setText(Integer.toString(SystemParameter.testDataCreatorGridDefaultHeight));        topPane.getChildren().addAll(heightLabel, heightField);        Button chooseButton = new Button("create");        chooseButton.setOnAction(new EventHandler<ActionEvent>() {            @Override            public void handle(ActionEvent event) {                reloadCenterPane(getWidthFromField(), getHeightFromField());            }        });        topPane.getChildren().add(chooseButton);        root.setTop(topPane);    }    private int getWidthFromField() {        try {            int width = Integer.parseInt(widthField.getText());            if (width <=0 || width > SystemParameter.testDataCreatorGridMaxWidth) {                widthField.setText(SystemParameter.testDataCreatorGridDefaultWidth + "");                return SystemParameter.testDataCreatorGridDefaultWidth;            }            return width;        } catch (NumberFormatException ex) {            widthField.setText(SystemParameter.testDataCreatorGridDefaultWidth + "");            return SystemParameter.testDataCreatorGridDefaultWidth;        }    }    private int getHeightFromField() {        try {            int height = Integer.parseInt(heightField.getText());            if (height <=0 || height > SystemParameter.testDataCreatorGridMaxWidth) {                heightField.setText(SystemParameter.testDataCreatorGridDefaultWidth + "");                return SystemParameter.testDataCreatorGridDefaultWidth;            }            return height;        } catch (NumberFormatException ex) {            heightField.setText(SystemParameter.testDataCreatorGridDefaultWidth + "");            return SystemParameter.testDataCreatorGridDefaultHeight;        }    }}